//Middleware - a function returns another function
const myLogger = (store) => {
    return (next) => {
        return (action) => {        //action object
            console.log("Middleware Run");
            return next(action);     //this step is import to connect the middleware
        }
    }
}
const store = createStore(counterReducer, appliMiddleware(mylogger));  //middlware takes place before reducer

//shorter middleware
const myLogger = store => next => action => {
    console.log("Middleware Run");
    return next(action);         //always call next function
}
const store = createStore(counterReducer, appliMiddleware(mylogger)); 

//add a second middleware
const secondMiddleware = store => next => action => {
    console.log("Middleware Run");
    return next(action);         //always call next function
}
const store = createStore(counterReducer, appliMiddleware(mylogger, secondMiddleware)); //order is important 

//add a third middleware
const capAtTen = store => next => action => {
    console.log(store)  //store has 2 function, dispatch and getState
    if (store.getState() >= 10){
     return next({type: "DECREMENT"})   
    }
    next(action);
}
const store = createStore(counterReducer, appliMiddleware(mylogger, secondMiddleware, capAtTen));



